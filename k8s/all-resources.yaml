---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: scf-system

---
# ConfigMap for environment variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: scf-config
  namespace: scf-system
data:
  KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
  SPRING_KAFKA_PRODUCER_KEY_SERIALIZER: "org.apache.kafka.common.serialization.StringSerializer"
  SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER: "org.springframework.kafka.support.serializer.JsonSerializer"
  SPRING_KAFKA_PRODUCER_PROPERTIES_ACKS: "all"
  SPRING_KAFKA_PRODUCER_PROPERTIES_RETRIES: "3"
  SPRING_KAFKA_PRODUCER_PROPERTIES_COMPRESSION_TYPE: "gzip"
  SPRING_KAFKA_PRODUCER_PROPERTIES_BATCH_SIZE: "16384"
  SPRING_KAFKA_PRODUCER_PROPERTIES_LINGER_MS: "1"
  LOGGING_LEVEL_ORG_HIBERNATE_SQL: "debug"
  SERVER_ERROR_INCLUDE_MESSAGE: "always"
  SERVER_ERROR_INCLUDE_BINDING_ERRORS: "always"

---
# Secret for sensitive information
apiVersion: v1
kind: Secret
metadata:
  name: scf-secrets
  namespace: scf-system
type: Opaque
stringData:
  MYSQL_ROOT_PASSWORD: rootpassword
  MYSQL_PASSWORD: password
  JWT_SECRET: 7d1b1d6d36d8e6a8f1bda6a7f473f87b012b0345a1b5f

---
# PersistentVolumeClaims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mariadb-user-data
  namespace: scf-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mariadb-problem-data
  namespace: scf-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mariadb-edu-data
  namespace: scf-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data
  namespace: scf-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
# Deployment and Service for Zookeeper
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  namespace: scf-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: confluentinc/cp-zookeeper:latest
        env:
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
        ports:
        - containerPort: 2181

---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: scf-system
spec:
  selector:
    app: zookeeper
  ports:
    - port: 2181
      targetPort: 2181

---
# Deployment and Service for Kafka (Updated)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  namespace: scf-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:latest
        env:
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper:2181"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://kafka:9092"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "PLAINTEXT:PLAINTEXT"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: "PLAINTEXT"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        ports:
        - containerPort: 9092

---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: scf-system
spec:
  selector:
    app: kafka
  ports:
    - port: 9092
      targetPort: 9092

---
# Deployment and Service for MariaDB (User)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mariadb-user
  namespace: scf-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mariadb-user
  template:
    metadata:
      labels:
        app: mariadb-user
    spec:
      containers:
      - name: mariadb-user
        image: mariadb:latest
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: scf-secrets
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_DATABASE
          value: "member_db"
        - name: MYSQL_USER
          value: "user"
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: scf-secrets
              key: MYSQL_PASSWORD
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mariadb-user-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mariadb-user-storage
        persistentVolumeClaim:
          claimName: mariadb-user-data

---
apiVersion: v1
kind: Service
metadata:
  name: mariadb-user
  namespace: scf-system
spec:
  selector:
    app: mariadb-user
  ports:
    - port: 3306
      targetPort: 3306

---
# Deployment and Service for MariaDB (Problem)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mariadb-problem
  namespace: scf-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mariadb-problem
  template:
    metadata:
      labels:
        app: mariadb-problem
    spec:
      containers:
      - name: mariadb-problem
        image: mariadb:latest
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: scf-secrets
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_DATABASE
          value: "problem_db"
        - name: MYSQL_USER
          value: "user"
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: scf-secrets
              key: MYSQL_PASSWORD
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mariadb-problem-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mariadb-problem-storage
        persistentVolumeClaim:
          claimName: mariadb-problem-data

---
apiVersion: v1
kind: Service
metadata:
  name: mariadb-problem
  namespace: scf-system
spec:
  selector:
    app: mariadb-problem
  ports:
    - port: 3306
      targetPort: 3306

---
# Deployment and Service for MariaDB (Edu)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mariadb-edu
  namespace: scf-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mariadb-edu
  template:
    metadata:
      labels:
        app: mariadb-edu
    spec:
      containers:
      - name: mariadb-edu
        image: mariadb:latest
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: scf-secrets
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_DATABASE
          value: "edu_db"
        - name: MYSQL_USER
          value: "user"
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: scf-secrets
              key: MYSQL_PASSWORD
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mariadb-edu-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mariadb-edu-storage
        persistentVolumeClaim:
          claimName: mariadb-edu-data

---
apiVersion: v1
kind: Service
metadata:
  name: mariadb-edu
  namespace: scf-system
spec:
  selector:
    app: mariadb-edu
  ports:
    - port: 3306
      targetPort: 3306

---
# Deployment and Service for Redis
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-user
  namespace: scf-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-user
  template:
    metadata:
      labels:
        app: redis-user
    spec:
      containers:
      - name: redis-user
        image: redis:latest
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-storage
          mountPath: /data
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-data

---
apiVersion: v1
kind: Service
metadata:
  name: redis-user
  namespace: scf-system
spec:
  selector:
    app: redis-user
  ports:
    - port: 6379
      targetPort: 6379

---
# Deployment and Service for User Server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-server
  namespace: scf-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-server
  template:
    metadata:
      labels:
        app: user-server
    spec:
      containers:
      - name: user-server
        image: zlxldgus123/user
        env:
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:mariadb://mariadb-user:3306/member_db?characterEncoding=utf8mb4"
        - name: SPRING_DATASOURCE_USERNAME
          value: "user"
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: scf-secrets
              key: MYSQL_PASSWORD
        - name: SPRING_DATA_REDIS_HOST
          value: "redis-user"
        - name: SPRING_DATA_REDIS_PORT
          value: "6379"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: scf-secrets
              key: JWT_SECRET
        - name: JWT_ACCESS_TOKEN_EXPIRY
          value: "3600000"
        - name: JWT_REFRESH_TOKEN_EXPIRY
          value: "86400000"
        envFrom:
        - configMapRef:
            name: scf-config

---
apiVersion: v1
kind: Service
metadata:
  name: user-server
  namespace: scf-system
spec:
  selector:
    app: user-server
  ports:
    - port: 80
      targetPort: 8080

---
# Deployment and Service for Problem Server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: problem-server
  namespace: scf-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: problem-server
  template:
    metadata:
      labels:
        app: problem-server
    spec:
      containers:
      - name: problem-server
        image: zlxldgus123/problem
        env:
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:mariadb://mariadb-problem:3306/problem_db?characterEncoding=utf8mb4"
        - name: SPRING_DATASOURCE_USERNAME
          value: "user"
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: scf-secrets
              key: MYSQL_PASSWORD
        envFrom:
        - configMapRef:
            name: scf-config

---
apiVersion: v1
kind: Service
metadata:
  name: problem-server
  namespace: scf-system
spec:
  selector:
    app: problem-server
  ports:
    - port: 80
      targetPort: 8080

---
# Deployment and Service for Multi Server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: multi-server
  namespace: scf-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: multi-server
  template:
    metadata:
      labels:
        app: multi-server
    spec:
      containers:
      - name: multi-server
        image: zlxldgus123/multi
        envFrom:
        - configMapRef:
            name: scf-config

---
apiVersion: v1
kind: Service
metadata:
  name: multi-server
  namespace: scf-system
spec:
  selector:
    app: multi-server
  ports:
    - port: 80
      targetPort: 8080

---
# Deployment and Service for Rank Server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rank-server
  namespace: scf-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rank-server
  template:
    metadata:
      labels:
        app: rank-server
    spec:
      containers:
      - name: rank-server
        image: zlxldgus123/rank
        envFrom:
        - configMapRef:
            name: scf-config

---
apiVersion: v1
kind: Service
metadata:
  name: rank-server
  namespace: scf-system
spec:
  selector:
    app: rank-server
  ports:
    - port: 80
      targetPort: 8080

---
# Deployment and Service for Battle Server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: battle-server
  namespace: scf-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: battle-server
  template:
    metadata:
      labels:
        app: battle-server
    spec:
      containers:
      - name: battle-server
        image: zlxldgus123/battle
        envFrom:
        - configMapRef:
            name: scf-config

---
apiVersion: v1
kind: Service
metadata:
  name: battle-server
  namespace: scf-system
spec:
  selector:
    app: battle-server
  ports:
    - port: 80
      targetPort: 8080

---
# Deployment and Service for Chat Server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chat-server
  namespace: scf-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: chat-server
  template:
    metadata:
      labels:
        app: chat-server
    spec:
      containers:
      - name: chat-server
        image: zlxldgus123/chat
        env:
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:mariadb://mariadb-user:3306/member_db?characterEncoding=utf8mb4"
        - name: SPRING_DATASOURCE_USERNAME
          value: "user"
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: scf-secrets
              key: MYSQL_PASSWORD
        envFrom:
        - configMapRef:
            name: scf-config

---
apiVersion: v1
kind: Service
metadata:
  name: chat-server
  namespace: scf-system
spec:
  selector:
    app: chat-server
  ports:
    - port: 80
      targetPort: 8080

---
# Deployment and Service for Single Server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: single-server
  namespace: scf-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: single-server
  template:
    metadata:
      labels:
        app: single-server
    spec:
      containers:
      - name: single-server
        image: zlxldgus123/single
        env:
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:mariadb://mariadb-edu:3306/edu_db?characterEncoding=utf8mb4"
        - name: SPRING_DATASOURCE_USERNAME
          value: "user"
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: scf-secrets
              key: MYSQL_PASSWORD
        envFrom:
        - configMapRef:
            name: scf-config

---
apiVersion: v1
kind: Service
metadata:
  name: single-server
  namespace: scf-system
spec:
  selector:
    app: single-server
  ports:
    - port: 80
      targetPort: 8080

# You might want to add an Ingress resource here if you need external access to your services.
# For example:

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: scf-ingress
  namespace: scf-system
  annotations:
    kubernetes.io/ingress.class: nginx
    # Add other annotations as needed
spec:
  rules:
  - host: your-domain.com  # Replace with your actual domain
    http:
      paths:
      - path: /user
        pathType: Prefix
        backend:
          service:
            name: user-server
            port: 
              number: 80
      - path: /problem
        pathType: Prefix
        backend:
          service:
            name: problem-server
            port: 
              number: 80
      # Add more paths for other services as needed
